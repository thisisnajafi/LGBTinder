# LGBTinder API Endpoints with Request/Response Examples

## Overview

This document provides comprehensive API documentation for all LGBTinder endpoints with complete request and response examples.

## Base URL
```
Development: http://localhost:8000/api
Production: https://api.lgbtinder.com/api
```

## Authentication

### Bearer Token
Most endpoints require authentication using Bearer tokens:
```
Authorization: Bearer {token}
```

### Token Types
- **Profile Completion Token**: Limited scope for profile completion
- **Full Access Token**: Complete access to all features

---

## Authentication Endpoints

### 1. Register User

**Endpoint**: `POST /api/auth/register`

**Description**: Register a new user account

**Request Body**:
```json
{
  "first_name": "John",
  "last_name": "Doe",
  "email": "john.doe@example.com",
  "password": "password123",
  "referral_code": "ABC123"
}
```

**Success Response** (200):
```json
{
  "status": true,
  "message": "Registration successful! Please check your email for verification code.",
  "data": {
    "user_id": 1,
    "email": "john.doe@example.com",
    "email_sent": true,
    "resend_available_at": "2024-01-01 12:02:00",
    "hourly_attempts_remaining": 2
  }
}
```

**Error Response** (422):
```json
{
  "status": false,
  "message": "Validation error",
  "errors": {
    "email": ["The email field is required."],
    "password": ["The password field is required."]
  }
}
```

### 2. Check User State

**Endpoint**: `POST /api/auth/check-user-state`

**Description**: Check user's current authentication state and requirements

**Request Body**:
```json
{
  "email": "john.doe@example.com"
}
```

**Email Verification Required** (403):
```json
{
  "status": false,
  "message": "Email verification required",
  "data": {
    "user_state": "email_verification_required",
    "user_id": 1,
    "email": "john.doe@example.com",
    "needs_verification": true
  }
}
```

**Profile Completion Required** (403):
```json
{
  "status": false,
  "message": "Profile completion required",
  "data": {
    "user_state": "profile_completion_required",
    "user_id": 1,
    "email": "john.doe@example.com",
    "token": "profile_completion_token_here",
    "token_type": "Bearer",
    "profile_completion_status": {
      "is_complete": false,
      "missing_fields": ["country", "city", "gender", "birth_date"]
    }
  }
}
```

**Ready for Login** (200):
```json
{
  "status": true,
  "message": "User is ready for login",
  "data": {
    "user_state": "ready_for_login",
    "user_id": 1,
    "email": "john.doe@example.com",
    "profile_completed": true
  }
}
```

### 3. Verify Email Code

**Endpoint**: `POST /api/auth/send-verification`

**Description**: Verify email with 6-digit code

**Request Body**:
```json
{
  "email": "john.doe@example.com",
  "code": "123456"
}
```

**Success Response** (200):
```json
{
  "status": true,
  "message": "Email verified successfully! Please complete your profile.",
  "data": {
    "user_id": 1,
    "email": "john.doe@example.com",
    "token": "profile_completion_token_here",
    "token_type": "Bearer",
    "profile_completion_required": true
  }
}
```

**Error Response** (422):
```json
{
  "status": false,
  "message": "Invalid or expired verification code"
}
```

### 4. Complete Profile Registration

**Endpoint**: `POST /api/complete-registration`

**Description**: Complete user profile with all required information

**Authentication**: Required - Profile completion token

**Request Body**:
```json
{
  "device_name": "iPhone 15 Pro",
  "country_id": 1,
  "city_id": 1,
  "gender": 1,
  "birth_date": "1995-06-15",
  "min_age_preference": 21,
  "max_age_preference": 35,
  "profile_bio": "Love traveling, music, and meeting new people! Looking for someone to share adventures with.",
  "height": 175,
  "weight": 70,
  "smoke": false,
  "drink": true,
  "gym": true,
  "music_genres": [1, 3, 5],
  "educations": [2, 3],
  "jobs": [1, 4],
  "languages": [1, 2],
  "interests": [1, 2, 3, 7],
  "preferred_genders": [1, 3],
  "relation_goals": [1, 2]
}
```

**Success Response** (200):
```json
{
  "status": true,
  "message": "Profile completed successfully!",
  "data": {
    "user": {
      "id": 1,
      "name": "John Doe",
      "email": "john.doe@example.com",
      "country_id": 1,
      "city_id": 1,
      "country": "United States",
      "city": "New York",
      "gender": 1,
      "birth_date": "1995-06-15",
      "profile_bio": "Love traveling, music, and meeting new people!",
      "height": 175,
      "weight": 70,
      "smoke": false,
      "drink": true,
      "gym": true,
      "min_age_preference": 21,
      "max_age_preference": 35
    },
    "token": "full_access_token_here",
    "token_type": "Bearer",
    "profile_completed": true,
    "needs_profile_completion": false,
    "user_state": "ready_for_app"
  }
}
```

**Validation Error** (422):
```json
{
  "status": false,
  "message": "Validation error",
  "errors": {
    "country_id": ["The country id field is required."],
    "city_id": ["The city id field is required."],
    "profile_bio": ["The profile bio field is required."]
  }
}
```

---

## Reference Data Endpoints

### 1. Get Countries

**Endpoint**: `GET /api/countries`

**Description**: Get all available countries

**Success Response** (200):
```json
{
  "status": "success",
  "data": [
    {
      "id": 1,
      "name": "United States",
      "code": "USA",
      "phone_code": "+1"
    },
    {
      "id": 2,
      "name": "United Kingdom",
      "code": "GBR",
      "phone_code": "+44"
    },
    {
      "id": 3,
      "name": "Canada",
      "code": "CAN",
      "phone_code": "+1"
    }
  ]
}
```

### 2. Get Cities by Country

**Endpoint**: `GET /api/cities/country/{countryId}`

**Description**: Get all cities for a specific country

**Success Response** (200):
```json
{
  "status": "success",
  "data": [
    {
      "id": 1,
      "name": "New York",
      "state_province": "New York"
    },
    {
      "id": 2,
      "name": "Los Angeles",
      "state_province": "California"
    },
    {
      "id": 3,
      "name": "Chicago",
      "state_province": "Illinois"
    }
  ]
}
```

### 3. Get Genders

**Endpoint**: `GET /api/genders`

**Description**: Get all available gender options

**Success Response** (200):
```json
{
  "status": "success",
  "data": [
    {
      "id": 1,
      "title": "Man",
      "status": "active"
    },
    {
      "id": 2,
      "title": "Woman",
      "status": "active"
    },
    {
      "id": 3,
      "title": "Non-binary",
      "status": "active"
    },
    {
      "id": 4,
      "title": "Transgender",
      "status": "active"
    }
  ]
}
```

### 4. Get Jobs

**Endpoint**: `GET /api/jobs`

**Description**: Get all available job/profession options

**Success Response** (200):
```json
{
  "status": "success",
  "data": [
    {
      "id": 1,
      "title": "Software Engineer",
      "status": "active"
    },
    {
      "id": 2,
      "title": "Doctor",
      "status": "active"
    },
    {
      "id": 3,
      "title": "Teacher",
      "status": "active"
    },
    {
      "id": 4,
      "title": "Artist",
      "status": "active"
    }
  ]
}
```

### 5. Get Education Levels

**Endpoint**: `GET /api/education`

**Description**: Get all available education level options

**Success Response** (200):
```json
{
  "status": "success",
  "data": [
    {
      "id": 1,
      "title": "High School",
      "status": "active"
    },
    {
      "id": 2,
      "title": "Bachelor's Degree",
      "status": "active"
    },
    {
      "id": 3,
      "title": "Master's Degree",
      "status": "active"
    },
    {
      "id": 4,
      "title": "PhD",
      "status": "active"
    }
  ]
}
```

### 6. Get Interests

**Endpoint**: `GET /api/interests`

**Description**: Get all available interest options

**Success Response** (200):
```json
{
  "status": "success",
  "data": [
    {
      "id": 1,
      "title": "Music",
      "status": "active"
    },
    {
      "id": 2,
      "title": "Travel",
      "status": "active"
    },
    {
      "id": 3,
      "title": "Sports",
      "status": "active"
    },
    {
      "id": 4,
      "title": "Art",
      "status": "active"
    }
  ]
}
```

### 7. Get Languages

**Endpoint**: `GET /api/languages`

**Description**: Get all available language options

**Success Response** (200):
```json
{
  "status": "success",
  "data": [
    {
      "id": 1,
      "title": "English",
      "status": "active"
    },
    {
      "id": 2,
      "title": "Spanish",
      "status": "active"
    },
    {
      "id": 3,
      "title": "French",
      "status": "active"
    },
    {
      "id": 4,
      "title": "German",
      "status": "active"
    }
  ]
}
```

### 8. Get Music Genres

**Endpoint**: `GET /api/music-genres`

**Description**: Get all available music genre options

**Success Response** (200):
```json
{
  "status": "success",
  "data": [
    {
      "id": 1,
      "title": "Pop",
      "status": "active"
    },
    {
      "id": 2,
      "title": "Rock",
      "status": "active"
    },
    {
      "id": 3,
      "title": "Hip-Hop",
      "status": "active"
    },
    {
      "id": 4,
      "title": "Electronic",
      "status": "active"
    }
  ]
}
```

### 9. Get Relationship Goals

**Endpoint**: `GET /api/relation-goals`

**Description**: Get all available relationship goal options

**Success Response** (200):
```json
{
  "status": "success",
  "data": [
    {
      "id": 1,
      "title": "Long-term relationship",
      "image_url": "https://api.lgbtinder.com/storage/relation_goals/long-term.png"
    },
    {
      "id": 2,
      "title": "Casual dating",
      "image_url": "https://api.lgbtinder.com/storage/relation_goals/casual.png"
    },
    {
      "id": 3,
      "title": "Friendship",
      "image_url": "https://api.lgbtinder.com/storage/relation_goals/friendship.png"
    }
  ]
}
```

### 10. Get Preferred Genders

**Endpoint**: `GET /api/preferred-genders`

**Description**: Get all available preferred gender options for matching

**Success Response** (200):
```json
{
  "status": "success",
  "data": [
    {
      "id": 1,
      "title": "Men",
      "status": "active"
    },
    {
      "id": 2,
      "title": "Women",
      "status": "active"
    },
    {
      "id": 3,
      "title": "Non-binary",
      "status": "active"
    },
    {
      "id": 4,
      "title": "Transgender",
      "status": "active"
    }
  ]
}
```

---

## User Management Endpoints

### 1. Get Current User

**Endpoint**: `GET /api/user`

**Description**: Get current authenticated user's profile

**Authentication**: Required - Full access token

**Success Response** (200):
```json
{
  "id": 1,
  "first_name": "John",
  "last_name": "Doe",
  "full_name": "John Doe",
  "email": "john.doe@example.com",
  "country_id": 1,
  "city_id": 1,
  "country": "United States",
  "city": "New York",
  "birth_date": "1995-06-15",
  "profile_bio": "Love traveling, music, and meeting new people!",
  "avatar_url": "https://api.lgbtinder.com/storage/avatars/user_1.jpg",
  "height": 175,
  "weight": 70,
  "smoke": false,
  "drink": true,
  "gym": true,
  "min_age_preference": 21,
  "max_age_preference": 35,
  "profile_completed": true,
  "images": [
    {
      "id": 1,
      "url": "https://api.lgbtinder.com/storage/images/user_1_1.jpg",
      "is_primary": true,
      "order": 1
    }
  ],
  "jobs": [
    {
      "id": 1,
      "title": "Software Engineer"
    }
  ],
  "educations": [
    {
      "id": 2,
      "title": "Bachelor's Degree"
    }
  ],
  "music_genres": [
    {
      "id": 1,
      "title": "Pop"
    }
  ],
  "languages": [
    {
      "id": 1,
      "title": "English"
    }
  ],
  "interests": [
    {
      "id": 1,
      "title": "Music"
    }
  ],
  "preferred_genders": [
    {
      "id": 1,
      "title": "Men"
    }
  ],
  "relation_goals": [
    {
      "id": 1,
      "title": "Long-term relationship"
    }
  ]
}
```

---

## Matching & Likes Endpoints

### 1. Like User

**Endpoint**: `POST /api/likes/like`

**Description**: Like another user

**Authentication**: Required - Full access token

**Request Body**:
```json
{
  "target_user_id": 2
}
```

**Success Response** (200):
```json
{
  "status": true,
  "message": "User liked successfully",
  "data": {
    "like_id": 1,
    "target_user_id": 2,
    "status": "pending",
    "is_match": false,
    "created_at": "2024-01-01T12:00:00Z"
  }
}
```

**Match Response** (200):
```json
{
  "status": true,
  "message": "It's a match!",
  "data": {
    "like_id": 1,
    "target_user_id": 2,
    "status": "matched",
    "is_match": true,
    "match_id": 1,
    "created_at": "2024-01-01T12:00:00Z"
  }
}
```

### 2. Get Matches

**Endpoint**: `GET /api/likes/matches`

**Description**: Get user's matches

**Authentication**: Required - Full access token

**Success Response** (200):
```json
{
  "status": true,
  "data": [
    {
      "match_id": 1,
      "user": {
        "id": 2,
        "name": "Jane Smith",
        "age": 25,
        "avatar_url": "https://api.lgbtinder.com/storage/avatars/user_2.jpg",
        "profile_bio": "Love hiking and photography!",
        "city": "New York"
      },
      "matched_at": "2024-01-01T12:00:00Z",
      "last_message": {
        "id": 1,
        "message": "Hey! How are you?",
        "sent_at": "2024-01-01T12:30:00Z",
        "is_read": false
      }
    }
  ]
}
```

---

## Chat Endpoints

### 1. Send Message

**Endpoint**: `POST /api/chat/send`

**Description**: Send a message to a matched user

**Authentication**: Required - Full access token

**Request Body**:
```json
{
  "receiver_id": 2,
  "message": "Hey! How are you doing?",
  "message_type": "text"
}
```

**Success Response** (200):
```json
{
  "status": true,
  "message": "Message sent successfully",
  "data": {
    "message_id": 1,
    "sender_id": 1,
    "receiver_id": 2,
    "message": "Hey! How are you doing?",
    "message_type": "text",
    "sent_at": "2024-01-01T12:00:00Z",
    "is_read": false
  }
}
```

### 2. Get Chat History

**Endpoint**: `GET /api/chat/history`

**Description**: Get chat history with a specific user

**Authentication**: Required - Full access token

**Query Parameters**:
- `user_id` (required): ID of the user to get chat history with
- `page` (optional): Page number for pagination
- `limit` (optional): Number of messages per page

**Success Response** (200):
```json
{
  "status": true,
  "data": {
    "messages": [
      {
        "id": 1,
        "sender_id": 1,
        "receiver_id": 2,
        "message": "Hey! How are you doing?",
        "message_type": "text",
        "sent_at": "2024-01-01T12:00:00Z",
        "is_read": true
      },
      {
        "id": 2,
        "sender_id": 2,
        "receiver_id": 1,
        "message": "I'm doing great! How about you?",
        "message_type": "text",
        "sent_at": "2024-01-01T12:05:00Z",
        "is_read": false
      }
    ],
    "pagination": {
      "current_page": 1,
      "total_pages": 1,
      "total_messages": 2,
      "per_page": 20
    }
  }
}
```

---

## Profile Management Endpoints

### 1. Update Profile

**Endpoint**: `POST /api/profile/update`

**Description**: Update user profile information

**Authentication**: Required - Full access token

**Request Body**:
```json
{
  "profile_bio": "Updated bio text",
  "height": 180,
  "weight": 75,
  "smoke": false,
  "drink": true,
  "gym": true,
  "min_age_preference": 22,
  "max_age_preference": 40
}
```

**Success Response** (200):
```json
{
  "status": true,
  "message": "Profile updated successfully",
  "data": {
    "id": 1,
    "profile_bio": "Updated bio text",
    "height": 180,
    "weight": 75,
    "smoke": false,
    "drink": true,
    "gym": true,
    "min_age_preference": 22,
    "max_age_preference": 40,
    "updated_at": "2024-01-01T12:00:00Z"
  }
}
```

### 2. Upload Profile Picture

**Endpoint**: `POST /api/profile-pictures/upload`

**Description**: Upload a new profile picture

**Authentication**: Required - Full access token

**Request**: Multipart form data
- `image` (file): Image file to upload
- `is_primary` (boolean): Whether to set as primary picture

**Success Response** (200):
```json
{
  "status": true,
  "message": "Profile picture uploaded successfully",
  "data": {
    "id": 1,
    "url": "https://api.lgbtinder.com/storage/profile_pictures/user_1_1.jpg",
    "is_primary": true,
    "created_at": "2024-01-01T12:00:00Z"
  }
}
```

---

## Error Responses

### Common Error Formats

**Validation Error** (422):
```json
{
  "status": false,
  "message": "Validation error",
  "errors": {
    "field_name": ["Error message"]
  }
}
```

**Unauthorized** (401):
```json
{
  "status": false,
  "message": "Unauthenticated."
}
```

**Forbidden** (403):
```json
{
  "status": false,
  "message": "Insufficient permissions"
}
```

**Not Found** (404):
```json
{
  "status": false,
  "message": "Resource not found"
}
```

**Server Error** (500):
```json
{
  "status": false,
  "message": "Internal server error",
  "error": "Detailed error message (development only)"
}
```

---

## Rate Limiting

Most endpoints have rate limiting applied:
- **Authentication endpoints**: 10 requests per minute
- **Like endpoints**: 30 requests per minute
- **Other endpoints**: Standard rate limiting

When rate limited, you'll receive a 429 status code:
```json
{
  "status": false,
  "message": "Too many requests",
  "data": {
    "retry_after": 60
  }
}
```

---

## Pagination

Many list endpoints support pagination:

**Query Parameters**:
- `page`: Page number (default: 1)
- `limit`: Items per page (default: 20, max: 100)

**Response Format**:
```json
{
  "status": true,
  "data": {
    "items": [...],
    "pagination": {
      "current_page": 1,
      "total_pages": 5,
      "total_items": 100,
      "per_page": 20,
      "has_next": true,
      "has_prev": false
    }
  }
}
```

---

## WebSocket Events

The API also supports real-time features via WebSocket:

### Connection
```
wss://api.lgbtinder.com/ws?token={access_token}
```

### Events

**New Message**:
```json
{
  "event": "message.received",
  "data": {
    "message_id": 1,
    "sender_id": 2,
    "message": "Hello!",
    "sent_at": "2024-01-01T12:00:00Z"
  }
}
```

**User Typing**:
```json
{
  "event": "user.typing",
  "data": {
    "user_id": 2,
    "is_typing": true
  }
}
```

**New Match**:
```json
{
  "event": "match.created",
  "data": {
    "match_id": 1,
    "user": {
      "id": 2,
      "name": "Jane Smith",
      "avatar_url": "https://api.lgbtinder.com/storage/avatars/user_2.jpg"
    }
  }
}
```

This documentation covers all the main API endpoints with complete request and response examples. For the most up-to-date information, always refer to the actual API responses.

