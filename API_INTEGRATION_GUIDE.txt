# LGBTinder API Integration Guide

## Overview

This guide provides comprehensive documentation for integrating with the LGBTinder API. The API is designed to support a complete dating application with authentication, profile management, matching, and real-time messaging features.

## Table of Contents

1. [Getting Started](#getting-started)
2. [Authentication](#authentication)
3. [API Endpoints](#api-endpoints)
4. [Data Models](#data-models)
5. [Error Handling](#error-handling)
6. [Rate Limiting](#rate-limiting)
7. [WebSocket Events](#websocket-events)
8. [File Uploads](#file-uploads)
9. [Best Practices](#best-practices)
10. [Flutter Integration](#flutter-integration)

## Getting Started

### Base URL
```
Development: http://localhost:8000/api
Production: https://api.lgbtinder.com/api
```

### Authentication
Most endpoints require Bearer token authentication:
```
Authorization: Bearer {your_token}
```

### Content Type
All requests should include:
```
Content-Type: application/json
Accept: application/json
```

## Authentication

### 1. User Registration
```dart
// Request
final request = RegisterRequest(
  firstName: 'John',
  lastName: 'Doe',
  email: 'john.doe@example.com',
  password: 'password123',
  referralCode: 'ABC123', // Optional
);

final response = await AuthApiService.register(request);
```

### 2. Check User State
```dart
// Request
final request = CheckUserStateRequest(email: 'john.doe@example.com');
final response = await AuthApiService.checkUserState(request);

// Handle different states
switch (response.data?.userState) {
  case 'email_verification_required':
    // Navigate to email verification
    break;
  case 'profile_completion_required':
    // Navigate to profile completion
    break;
  case 'ready_for_login':
    // User can login
    break;
}
```

### 3. Email Verification
```dart
// Request
final request = VerifyEmailRequest(
  email: 'john.doe@example.com',
  code: '123456',
);

final response = await AuthApiService.verifyEmail(request);
```

### 4. Profile Completion
```dart
// Request
final request = CompleteProfileRequest(
  deviceName: 'iPhone 15 Pro',
  countryId: 1,
  cityId: 1,
  gender: 1,
  birthDate: '1995-06-15',
  minAgePreference: 21,
  maxAgePreference: 35,
  profileBio: 'Love traveling and music!',
  height: 175,
  weight: 70,
  smoke: false,
  drink: true,
  gym: true,
  musicGenres: [1, 3, 5],
  educations: [2, 3],
  jobs: [1, 4],
  languages: [1, 2],
  interests: [1, 2, 3, 7],
  preferredGenders: [1, 3],
  relationGoals: [1, 2],
);

final response = await AuthApiService.completeProfile(request, token);
```

## API Endpoints

### Reference Data Endpoints

#### Get Countries
```dart
final response = await ReferenceDataApiService.getCountries();
```

#### Get Cities by Country
```dart
final response = await ReferenceDataApiService.getCitiesByCountry(countryId);
```

#### Get All Reference Data
```dart
final response = await ReferenceDataApiService.getAllReferenceData();
```

### User Management

#### Get Current User
```dart
final user = await UserApiService.getCurrentUser(token);
```

### Matching & Likes

#### Like a User
```dart
final request = LikeUserRequest(targetUserId: 2);
final response = await MatchingApiService.likeUser(request, token);

if (response.data?.isMatch == true) {
  // It's a match!
  showMatchDialog();
}
```

#### Get Matches
```dart
final response = await MatchingApiService.getMatches(token);
```

### Chat & Messaging

#### Send Message
```dart
final request = SendMessageRequest(
  receiverId: 2,
  message: 'Hey! How are you?',
  messageType: MessageType.text,
);

final response = await ChatApiService.sendMessage(request, token);
```

#### Get Chat History
```dart
final response = await ChatApiService.getChatHistory(
  userId: 2,
  token: token,
  page: 1,
  limit: 20,
);
```

### Profile Management

#### Update Profile
```dart
final request = UpdateProfileRequest(
  profileBio: 'Updated bio text',
  height: 180,
  weight: 75,
  smoke: false,
  drink: true,
  gym: true,
  minAgePreference: 22,
  maxAgePreference: 40,
);

final response = await ProfileApiService.updateProfile(request, token);
```

#### Upload Profile Picture
```dart
final request = UploadProfilePictureRequest(
  image: imageFile,
  isPrimary: true,
);

final response = await ProfileApiService.uploadProfilePicture(request, token);
```

## Data Models

### Authentication Models
- `RegisterRequest` - User registration data
- `RegisterResponse` - Registration response
- `CheckUserStateRequest` - User state check request
- `CheckUserStateResponse` - User state response
- `VerifyEmailRequest` - Email verification request
- `VerifyEmailResponse` - Email verification response
- `CompleteProfileRequest` - Profile completion request
- `CompleteProfileResponse` - Profile completion response

### Reference Data Models
- `Country` - Country information
- `City` - City information
- `Gender` - Gender options
- `Job` - Job/profession options
- `Education` - Education level options
- `Interest` - Interest options
- `Language` - Language options
- `MusicGenre` - Music genre options
- `RelationGoal` - Relationship goal options
- `PreferredGender` - Preferred gender options

### User Models
- `UserProfile` - Complete user profile
- `UserImage` - User image data
- `UserJob` - User job information
- `UserEducation` - User education information
- `UserMusicGenre` - User music genre
- `UserLanguage` - User language
- `UserInterest` - User interest
- `UserPreferredGender` - User preferred gender
- `UserRelationGoal` - User relation goal

### Matching Models
- `LikeUserRequest` - Like user request
- `LikeUserResponse` - Like user response
- `LikeData` - Like data
- `MatchData` - Match data
- `MatchUser` - Match user information
- `MatchLastMessage` - Last message in match
- `GetMatchesResponse` - Get matches response

### Chat Models
- `SendMessageRequest` - Send message request
- `SendMessageResponse` - Send message response
- `MessageData` - Message data
- `ChatHistoryData` - Chat history data
- `GetChatHistoryResponse` - Get chat history response
- `PaginationData` - Pagination information

### Profile Models
- `UpdateProfileRequest` - Update profile request
- `UpdateProfileResponse` - Update profile response
- `UploadProfilePictureRequest` - Upload picture request
- `UploadProfilePictureResponse` - Upload picture response

### Common Models
- `PaginationData` - Pagination information
- `ApiErrorResponse` - API error response
- `ApiSuccessResponse` - API success response
- `RateLimitResponse` - Rate limit response
- `WebSocketEvent` - WebSocket event data

## Error Handling

### Error Response Format
```json
{
  "status": false,
  "message": "Validation error",
  "errors": {
    "email": ["The email field is required."],
    "password": ["The password field is required."]
  }
}
```

### HTTP Status Codes
- `200` - Success
- `201` - Created
- `400` - Bad Request
- `401` - Unauthorized
- `403` - Forbidden
- `404` - Not Found
- `422` - Validation Error
- `429` - Rate Limited
- `500` - Internal Server Error

### Error Handling in Flutter
```dart
try {
  final response = await AuthApiService.register(request);
  
  if (response.status) {
    // Success
    print('Registration successful: ${response.message}');
  } else {
    // Handle error
    if (response.errors != null) {
      // Validation errors
      final firstError = response.errors!.values.first.first;
      showError(firstError);
    } else {
      // General error
      showError(response.message);
    }
  }
} catch (e) {
  // Network or parsing error
  showError('Network error: ${e.toString()}');
}
```

## Rate Limiting

### Rate Limits
- **Authentication endpoints**: 10 requests per minute
- **Like endpoints**: 30 requests per minute
- **Other endpoints**: Standard rate limiting

### Rate Limit Response
```json
{
  "status": false,
  "message": "Too many requests",
  "data": {
    "retry_after": 60
  }
}
```

### Handling Rate Limits
```dart
if (response.statusCode == 429) {
  final rateLimitResponse = RateLimitResponse.fromJson(responseData);
  final retryAfter = rateLimitResponse.data?.retryAfter ?? 60;
  
  showError('Rate limited. Please try again in $retryAfter seconds.');
  // Implement retry logic
}
```

## WebSocket Events

### Connection
```dart
final wsUrl = 'wss://api.lgbtinder.com/ws?token=$token';
final webSocket = WebSocketChannel.connect(Uri.parse(wsUrl));
```

### Event Types
- `message.received` - New message received
- `user.typing` - User typing indicator
- `match.created` - New match created
- `user.online` - User came online
- `user.offline` - User went offline

### Event Handling
```dart
webSocket.stream.listen((data) {
  final event = WebSocketEvent.fromJson(jsonDecode(data));
  
  switch (event.event) {
    case WebSocketEventType.messageReceived:
      // Handle new message
      break;
    case WebSocketEventType.userTyping:
      // Handle typing indicator
      break;
    case WebSocketEventType.matchCreated:
      // Handle new match
      break;
    case WebSocketEventType.userOnline:
      // Handle user online
      break;
    case WebSocketEventType.userOffline:
      // Handle user offline
      break;
  }
});
```

## File Uploads

### Profile Picture Upload
```dart
// Validate file
if (!ProfileApiService.isValidProfilePictureFile(imageFile)) {
  showError('Invalid image file');
  return;
}

// Upload
final request = UploadProfilePictureRequest(
  image: imageFile,
  isPrimary: true,
);

final response = await ProfileApiService.uploadProfilePicture(request, token);
```

### File Validation
- **Supported formats**: JPG, JPEG, PNG, GIF, WEBP
- **Maximum size**: 10MB
- **Validation**: File existence, size, and format

## Best Practices

### 1. Error Handling
- Always check response status
- Handle validation errors gracefully
- Implement retry logic for network errors
- Show user-friendly error messages

### 2. Token Management
- Store tokens securely
- Implement token refresh logic
- Handle token expiration
- Clear tokens on logout

### 3. Caching
- Cache reference data
- Implement offline support
- Use appropriate cache strategies
- Invalidate cache when needed

### 4. Performance
- Use pagination for large lists
- Implement lazy loading
- Optimize image loading
- Minimize API calls

### 5. Security
- Validate all inputs
- Use HTTPS in production
- Implement proper authentication
- Handle sensitive data carefully

## Flutter Integration

### 1. Service Layer
```dart
class ApiService {
  static const String baseUrl = 'https://api.lgbtinder.com/api';
  
  static Future<Map<String, dynamic>> _makeRequest(
    String endpoint,
    Map<String, dynamic>? data,
    String? token,
  ) async {
    final response = await http.post(
      Uri.parse('$baseUrl$endpoint'),
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        if (token != null) 'Authorization': 'Bearer $token',
      },
      body: data != null ? jsonEncode(data) : null,
    );
    
    return jsonDecode(response.body);
  }
}
```

### 2. State Management
```dart
class AuthProvider extends ChangeNotifier {
  String? _token;
  UserProfile? _user;
  
  String? get token => _token;
  UserProfile? get user => _user;
  
  Future<void> login(String email, String password) async {
    try {
      final response = await AuthApiService.login(email, password);
      if (response.status) {
        _token = response.data?.token;
        _user = response.data?.user;
        notifyListeners();
      }
    } catch (e) {
      // Handle error
    }
  }
}
```

### 3. Error Handling Widget
```dart
class ErrorHandler {
  static void handleApiError(BuildContext context, dynamic error) {
    String message = 'An error occurred';
    
    if (error is ApiErrorResponse) {
      message = error.allValidationErrors;
    } else if (error is String) {
      message = error;
    }
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
      ),
    );
  }
}
```

### 4. Loading States
```dart
class LoadingProvider extends ChangeNotifier {
  bool _isLoading = false;
  
  bool get isLoading => _isLoading;
  
  void setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }
}
```

### 5. Offline Support
```dart
class OfflineService {
  static Future<T> getData<T>(
    String key,
    Future<T> Function() fetchFunction,
  ) async {
    // Try to get from cache first
    final cachedData = await _getCachedData<T>(key);
    if (cachedData != null) {
      return cachedData;
    }
    
    // Fetch from API
    try {
      final data = await fetchFunction();
      await _cacheData(key, data);
      return data;
    } catch (e) {
      // Return cached data if available
      final cachedData = await _getCachedData<T>(key);
      if (cachedData != null) {
        return cachedData;
      }
      rethrow;
    }
  }
}
```

## Conclusion

This guide provides a comprehensive overview of the LGBTinder API integration. For more detailed information about specific endpoints and data models, refer to the individual service files and model definitions in the codebase.

Remember to:
- Always handle errors gracefully
- Implement proper authentication
- Use appropriate caching strategies
- Follow security best practices
- Test thoroughly before production deployment

For additional support or questions, please refer to the API documentation or contact the development team.
